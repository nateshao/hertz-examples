// Code generated by hertz generator.

package student_gorm

import (
	"context"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_gorm/biz/dal/mysql"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_gorm/biz/model"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_gorm/biz/model/student_gorm"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_gorm/biz/pack"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UpdateUser .
// @router /v1/student/update/:student_id [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req student_gorm.UpdateStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	stu := &model.Student{}
	stu.ID = uint(req.StudentID)
	stu.Name = req.Name
	stu.Gender = int64(req.Gender)
	stu.Age = req.Age
	stu.Introduce = req.Introduce

	if err = mysql.UpdateStudent(stu); err != nil {
		c.JSON(consts.StatusInternalServerError, student_gorm.UpdateStudentResponse{Code: student_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	resp := new(student_gorm.UpdateStudentResponse)
	resp.Code = student_gorm.Code_Success
	resp.Msg = "更新成功"
	c.JSON(consts.StatusOK, resp)
}

// DeleteUser .
// @router /v1/student/delete/:student_id [POST]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req student_gorm.DeleteStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if err = mysql.DeleteStudent(req.StudentID); err != nil {
		c.JSON(consts.StatusInternalServerError, student_gorm.DeleteStudentResponse{Code: student_gorm.Code_DBErr, Msg: err.Error()})
		return
	}
	resp := new(student_gorm.DeleteStudentResponse)
	resp.Code = student_gorm.Code_Success
	c.JSON(consts.StatusOK, resp)
}

// QueryUser .
// @router /v1/student/query/ [POST]
func QueryUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req student_gorm.QueryStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	student, total, err := mysql.QueryStudent(req.Keyword, req.Page, req.PageSize)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &student_gorm.QueryStudentResponse{Code: student_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	resp := new(student_gorm.QueryStudentResponse)
	resp.Code = student_gorm.Code_Success
	resp.Total = total
	resp.Msg = "查询成功"
	resp.Students = pack.Students(student)
	c.JSON(consts.StatusOK, resp)
}

// CreateUser .
// @router /v1/student/create/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req student_gorm.CreateStudentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &student_gorm.CreateStudentResponse{Code: student_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	student := []*model.Student{
		{
			Name:      req.Name,
			Gender:    int64(req.Gender),
			Age:       req.Age,
			Introduce: req.Introduce,
		},
	}

	err = mysql.CreateStudent(student)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, student_gorm.CreateStudentResponse{Code: student_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	resp := new(student_gorm.CreateStudentResponse)
	resp.Code = student_gorm.Code_Success
	c.JSON(consts.StatusOK, resp)
}
